/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.8.1/userguide/java_library_plugin.html
 */

plugins {
    id 'application'
    id 'eclipse' // To create eclipse project
}

// Varibles
group = 'io.jhdf'
version = '0.0.1'
sourceCompatibility = 1.11
targetCompatibility = 1.11

// Detect OS
import org.gradle.internal.os.OperatingSystem
switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        project.ext.osName = "linux";
        break ;
    case OperatingSystem.MAC_OS:
        project.ext.osName = "macos";
        break ;
    case OperatingSystem.WINDOWS:
        project.ext.osName = "windows";
        break ;
}

ext {
	javafxVersion = '11.0.1'
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    // api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    // implementation 'com.google.guava:guava:23.0'
    
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.8.0-beta2' // Need 1.8 for modules
    runtime group: 'org.slf4j', name: 'slf4j-simple', version: '1.8.0-beta2'
    
    // jHDF lib
	compile group: 'io.jhdf', name:'jhdf',version: '0.1.3'
  
   	// Java FX dependices using custom Ivy URL repo
	compile group: 'org.openjfx', name: 'javafx-base', version: "${javafxVersion}", classifier: "${osName}"
	compile group: 'org.openjfx', name: 'javafx-controls', version: "${javafxVersion}", classifier: "${osName}"
	compile group: 'org.openjfx', name: 'javafx-fxml', version: "${javafxVersion}", classifier: "${osName}"
	compile group: 'org.openjfx', name: 'javafx-graphics', version: "${javafxVersion}", classifier: "${osName}"
}

// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()

}

jar {
    manifest {
        attributes(
        	'Automatic-Module-Name': 'jhdfx',
        	'Main-Class': 'io.jhdf.fx.Test'
        	)
    }
}

application {
    mainClassName = "io.jhdf.fx.Test"
}

/* compileJava {
    inputs.property("moduleName", 'jhdfx')
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'javafx.controls',
        ]
        classpath = files('/home/james/git/jhdf.git/jhdf/build/libs')
    }
} */

task runApp(type: JavaExec) {
    main = 'io.jhdf.fx.Test'
    classpath sourceSets.main.runtimeClasspath
    jvmArgs = ['--module-path', configurations.runtime.asPath,
               '--add-modules', 'javafx.controls,javafx.fxml']
}

task createPackage(type: Zip) {
    dependsOn 'jar'
    from configurations.runtime
	from "$buildDir/libs"
	from 'jhdfx.sh'
	into 'jhdfx'
}
